//+------------------------------------------------------------------+
//| Expert initialization function                                   |
//+------------------------------------------------------------------+
int OnInit()
  {
   // Retorna sucesso na inicialização
   return(INIT_SUCCEEDED);
  }

//+------------------------------------------------------------------+
//| Expert deinit function                                           |
//+------------------------------------------------------------------+
void OnDeinit(const int reason)
  {
   // Função chamada ao desativar o EA
  }

//+------------------------------------------------------------------+
//| Expert tick function                                             |
//+------------------------------------------------------------------+
void OnTick()
  {
   // Chamar função para identificar swings e pintar velas
   IdentifyAndPaintSwings();
  }

//+------------------------------------------------------------------+
//| Função para identificar e pintar swings na TF de 1H              |
//+------------------------------------------------------------------+
void IdentifyAndPaintSwings()
{
   // Definir uma distância mínima de 100 pips entre os Swings
   double minDistancePips = 100;

   // Obter o tamanho do ponto (para converter para pips corretamente)
   double pointSize = SymbolInfoDouble(Symbol(), SYMBOL_POINT);

   // Verificar se há barras suficientes no gráfico
   if (Bars(Symbol(), PERIOD_H1) < 3)
   {
      return;
   }

   // Declarar variáveis para armazenar os valores de high e low
   double high1, high2, high3;
   double low1, low2, low3;

   // Obter número total de barras na TF de 1H
   int totalBars = Bars(Symbol(), PERIOD_H1);

   // Iterar pelas velas do gráfico (começando da terceira vela)
   for (int i = 2; i < totalBars; i++)
   {
      // Coletar os valores de High e Low das últimas três velas
      high1 = iHigh(NULL, PERIOD_H1, i+1);   // Coletar o High da vela 1 (anterior)
      high2 = iHigh(NULL, PERIOD_H1, i);     // Coletar o High da vela 2 (atual)
      high3 = iHigh(NULL, PERIOD_H1, i-1);   // Coletar o High da vela 3 (seguinte)
      
      low1 = iLow(NULL, PERIOD_H1, i+1);     // Coletar o Low da vela 1 (anterior)
      low2 = iLow(NULL, PERIOD_H1, i);       // Coletar o Low da vela 2 (atual)
      low3 = iLow(NULL, PERIOD_H1, i-1);     // Coletar o Low da vela 3 (seguinte)

      // Calcular a distância entre os swings em pips usando o pointSize correto
      double distancePipsHigh = MathAbs(high2 - low3) / pointSize;
      double distancePipsLow = MathAbs(low2 - high3) / pointSize;

      // Identificação do Swing High para Low
      if (high2 > high1 && high2 > high3 && distancePipsHigh >= minDistancePips)  // Verificar se a distância é maior que 100 pips
      {
         // Pintar as três velas de vermelho
         ColorCandle(i+1, clrRed);  // Vela 1
         ColorCandle(i, clrRed);    // Vela 2
         ColorCandle(i-1, clrRed);  // Vela 3
      }

      // Identificação do Swing Low para High
      if (low2 < low1 && low2 < low3 && distancePipsLow >= minDistancePips)  // Verificar se a distância é maior que 100 pips
      {
         // Pintar as três velas de azul
         ColorCandle(i+1, clrBlue);  // Vela 1
         ColorCandle(i, clrBlue);    // Vela 2
         ColorCandle(i-1, clrBlue);  // Vela 3
      }
   }
}

//+------------------------------------------------------------------+
//| Função para colorir as velas                                      |
//+------------------------------------------------------------------+
void ColorCandle(int index, color candleColor)
  {
   // Verifica se o índice da vela é válido
   if (index < 0) 
   {
      return;
   }

   // Criar um identificador único para o objeto que será a vela colorida
   string obj_name = "candle_color_" + IntegerToString(index);

   // Verifica se o objeto já existe, e se não, cria um novo
   if (ObjectFind(0, obj_name) == -1) 
     {
      ObjectCreate(0, obj_name, OBJ_RECTANGLE, 0, iTime(NULL, PERIOD_H1, index), iHigh(NULL, PERIOD_H1, index), iTime(NULL, PERIOD_H1, index+1), iLow(NULL, PERIOD_H1, index));
      ObjectSetInteger(0, obj_name, OBJPROP_COLOR, candleColor);
      ObjectSetInteger(0, obj_name, OBJPROP_STYLE, STYLE_SOLID);
      ObjectSetInteger(0, obj_name, OBJPROP_WIDTH, 2);
     }
   else
     {
      // Se o objeto já existir, apenas altera sua cor
      ObjectSetInteger(0, obj_name, OBJPROP_COLOR, candleColor);
     }
  }
