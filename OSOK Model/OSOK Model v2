//+------------------------------------------------------------------+
//| Input parameters for the EA                                      |
//+------------------------------------------------------------------+
input bool UseDaylightSavingTime = true;   // Option to use DST
input double FixedLotSize = 0.01;          // Fixed lot size for trades (can be adjusted)
input double RiskPercentage = 0.5;          // Risk percentage per trade (if using percentage risk)
input double MaxStopLossPips = 50.0;       // Maximum stop loss in pips (to avoid large drawdowns)
input bool DrawCISDObjects = true;         // Option to draw CISD objects on the chart

//+------------------------------------------------------------------+
//| Expert initialization function                                   |
//+------------------------------------------------------------------+
int OnInit()
{
    // Initialization of EA
    return (INIT_SUCCEEDED);
}

//+------------------------------------------------------------------+
//| Expert deinitialization function                                 |
//+------------------------------------------------------------------+
void OnDeinit(const int reason)
{
    // Optionally, remove all CISD objects here if desired
    // For example, you can loop through objects and delete them
}

//+------------------------------------------------------------------+
//| Expert tick function                                             |
//+------------------------------------------------------------------+
void OnTick()
{
    // Check if it's within the allowed session (Londres or NY AM)
    if (IsAllowedSession())
    {
        // Check if there is already an open trade
        if (PositionsTotal() == 0)
        {
            // Identify swing high or swing low on 5-minute timeframe
            bool isSwingHigh = false, isSwingLow = false;
            if (TimeFrameSwings(PERIOD_M5, isSwingHigh, isSwingLow))
            {
                // Confirm CISD in 5-minute timeframe
                bool isBullishCISD = false, isBearishCISD = false;
                if (TimeFrameCISD(PERIOD_M5, isBullishCISD, isBearishCISD))
                {
                    // Only proceed if conditions for Buy or Sell are met
                    if (isSwingLow && isBullishCISD)
                    {
                        ExecuteTrade(ORDER_TYPE_BUY);
                    }
                    else if (isSwingHigh && isBearishCISD)
                    {
                        ExecuteTrade(ORDER_TYPE_SELL);
                    }
                }
            }
        }
        else
        {
            Print("There is already an open position. Waiting for it to close.");
        }
    }
    else
    {
        Print("Outside allowed trading session.");
    }
}

//+------------------------------------------------------------------+
//| Function to check allowed sessions                               |
//| Only allows trading during the London Open and NY AM sessions     |
//+------------------------------------------------------------------+
bool IsAllowedSession()
{
    // Get the current server time and convert to MqlDateTime structure
    datetime currentTime = TimeCurrent();
    MqlDateTime timeStruct;
    TimeToStruct(currentTime, timeStruct);

    // Adjust hour based on the difference from NY time
    int hour = timeStruct.hour;

    // Consider the time difference: Lisbon (UTC+0/1) vs. NY (UTC-5/4)
    int timeDifference = UseDaylightSavingTime ? 6 : 5; // 6 hours during DST, 5 hours otherwise
    hour -= timeDifference;

    // Wrap around hour if negative
    if (hour < 0)
        hour += 24;

    int minute = timeStruct.min;

    // Checking if the hour is within the London Open session (2:00 AM to 5:00 AM NYT)
    if ((hour == 2 && minute >= 0) || (hour == 3) || (hour == 4) || (hour == 5 && minute == 0))
    {
        return true; // Within London Open session
    }

    // Checking if the hour is within the NY AM session (8:30 AM to 11:00 AM NYT)
    if ((hour == 8 && minute >= 30) || (hour == 9) || (hour == 10))
    {
        return true; // Within NY AM session
    }

    return false;
}

//+------------------------------------------------------------------+
//| Function to check for swings in 5-minute timeframe               |
//+------------------------------------------------------------------+
bool TimeFrameSwings(ENUM_TIMEFRAMES timeFrame, bool &isSwingHigh, bool &isSwingLow)
{
    // Access highs and lows of the last three candles
    double high1 = iHigh(NULL, timeFrame, 1);
    double high2 = iHigh(NULL, timeFrame, 2);
    double high3 = iHigh(NULL, timeFrame, 3);

    double low1 = iLow(NULL, timeFrame, 1);
    double low2 = iLow(NULL, timeFrame, 2);
    double low3 = iLow(NULL, timeFrame, 3);

    // Check for a swing high (previous high is higher than neighboring highs)
    if (high2 > high1 && high2 > high3)
    {
        isSwingHigh = true;
        Print("Swing High detected on 5-minute timeframe.");
    }

    // Check for a swing low (previous low is lower than neighboring lows)
    if (low2 < low1 && low2 < low3)
    {
        isSwingLow = true;
        Print("Swing Low detected on 5-minute timeframe.");
    }

    return (isSwingHigh || isSwingLow);
}

//+------------------------------------------------------------------+
//| Function to check for CISD in 5-minute timeframe based on CISD.txt|
//+------------------------------------------------------------------+
bool TimeFrameCISD(ENUM_TIMEFRAMES timeFrame, bool &isBullishCISD, bool &isBearishCISD)
{
    // Implementing CISD logic based on CISD.txt rules
    if (IsBullishCISD(timeFrame))
    {
        isBullishCISD = true;
        Print("Bullish CISD detected.");
        if (DrawCISDObjects)
            DrawCISD(timeFrame, true); // Draw bullish CISD
    }
    else if (IsBearishCISD(timeFrame))
    {
        isBearishCISD = true;
        Print("Bearish CISD detected.");
        if (DrawCISDObjects)
            DrawCISD(timeFrame, false); // Draw bearish CISD
    }

    return (isBullishCISD || isBearishCISD);
}

//+------------------------------------------------------------------+
//| Function to detect bullish CISD based on CISD.txt                |
//+------------------------------------------------------------------+
bool IsBullishCISD(ENUM_TIMEFRAMES timeFrame)
{
    // Example logic for bullish CISD detection based on conditions in CISD.txt
    if (iClose(NULL, timeFrame, 1) > iOpen(NULL, timeFrame, 1) && iClose(NULL, timeFrame, 1) > iHigh(NULL, timeFrame, 2))
    {
        return true; // Bullish CISD condition met
    }
    return false;
}

//+------------------------------------------------------------------+
//| Function to detect bearish CISD based on CISD.txt                |
//+------------------------------------------------------------------+
bool IsBearishCISD(ENUM_TIMEFRAMES timeFrame)
{
    // Example logic for bearish CISD detection based on conditions in CISD.txt
    if (iClose(NULL, timeFrame, 1) < iOpen(NULL, timeFrame, 1) && iClose(NULL, timeFrame, 1) < iLow(NULL, timeFrame, 2))
    {
        return true; // Bearish CISD condition met
    }
    return false;
}

//+------------------------------------------------------------------+
//| Function to execute trade                                        |
//+------------------------------------------------------------------+
void ExecuteTrade(int orderType)
{
    // Get the current Ask and Bid prices
    double askPrice = SymbolInfoDouble(Symbol(), SYMBOL_ASK);
    double bidPrice = SymbolInfoDouble(Symbol(), SYMBOL_BID);
    double pointValue = SymbolInfoDouble(Symbol(), SYMBOL_POINT);

    // Determine Stop Loss level based on swing type
    double stopLossPrice = 0;
    double stopLossPips = 0;

    if (orderType == ORDER_TYPE_BUY)
    {
        stopLossPrice = iLow(NULL, PERIOD_M5, 2); // SL at the low of the previous swing
        stopLossPips = MathAbs(askPrice - stopLossPrice) / pointValue;
    }
    else if (orderType == ORDER_TYPE_SELL)
    {
        stopLossPrice = iHigh(NULL, PERIOD_M5, 2); // SL at the high of the previous swing
        stopLossPips = MathAbs(bidPrice - stopLossPrice) / pointValue;
    }

    // Ensure stop loss is within the maximum allowed to avoid large drawdowns
    if (stopLossPips > MaxStopLossPips)
    {
        Print("Adjusted stop loss to the maximum allowed pips to avoid large drawdowns.");
        stopLossPips = MaxStopLossPips;
        stopLossPrice = (orderType == ORDER_TYPE_BUY) ? askPrice - stopLossPips * pointValue : bidPrice + stopLossPips * pointValue;
    }

    // Ensure stop loss pips is not zero before calculating lot size
    if (stopLossPips <= 0)
    {
        Print("Error: Stop Loss in pips is zero or negative. Cannot proceed with trade.");
        return; // Exit the function to avoid division by zero
    }

    // Calculate Take Profit (minimum 1:2 RR)
    double takeProfitPrice = (orderType == ORDER_TYPE_BUY) ? askPrice + (2 * stopLossPips * pointValue) : bidPrice - (2 * stopLossPips * pointValue);

    // Set up request structure for order execution in MetaTrader 5
    MqlTradeRequest request;
    MqlTradeResult result;
    ZeroMemory(request);
    ZeroMemory(result);

    request.action = TRADE_ACTION_DEAL;
    request.symbol = Symbol();

    // Determine lot size based on chosen risk method
    double lotSize = CalculateLotSize(stopLossPips);
    request.volume = lotSize; // Set calculated lot size
    request.type = orderType;
    request.price = (orderType == ORDER_TYPE_BUY) ? askPrice : bidPrice;
    request.sl = stopLossPrice;
    request.tp = takeProfitPrice;
    request.deviation = 2;
    request.magic = 123456;
    request.comment = (orderType == ORDER_TYPE_BUY) ? "Buy Trade based on CISD" : "Sell Trade based on CISD";

    // Send the trade order
    if (!OrderSend(request, result))
    {
        Print("Error opening order: ", result.retcode);
    }
}

//+------------------------------------------------------------------+
//| Function to calculate lot size based on risk                     |
//+------------------------------------------------------------------+
double CalculateLotSize(double stopLossPips)
{
    double lotSize;
    if (RiskPercentage > 0)  // If using percentage risk
    {
        double accountBalance = AccountInfoDouble(ACCOUNT_BALANCE);
        double riskAmount = accountBalance * (RiskPercentage / 100.0);
        double pointValue = SymbolInfoDouble(Symbol(), SYMBOL_TRADE_TICK_VALUE);
        lotSize = riskAmount / (stopLossPips * pointValue);
    }
    else  // If using fixed lot size
    {
        lotSize = FixedLotSize;
    }
    return NormalizeDouble(lotSize, 2); // Normaliza para duas casas decimais
}

//+------------------------------------------------------------------+
//| Function to draw CISD on the chart                               |
//+------------------------------------------------------------------+
void DrawCISD(ENUM_TIMEFRAMES timeFrame, bool isBullish)
{
    // Get the price at which the CISD was confirmed (using the close of the candle)
    double price = iClose(NULL, timeFrame, 1); // Close price of the candle that confirmed CISD
    string objectName = isBullish ? "BullishCISD_" + TimeToString(TimeCurrent(), TIME_DATE | TIME_MINUTES) : "BearishCISD_" + TimeToString(TimeCurrent(), TIME_DATE | TIME_MINUTES);
    
    // Set color and style based on the CISD type
    color lineColor = isBullish ? clrGreen : clrRed;

    // Length of the line in price units (adjust as necessary)
    double shortLineLength = 50 * SymbolInfoDouble(Symbol(), SYMBOL_POINT); 

    // Create a horizontal line to represent CISD
    if (!ObjectCreate(0, objectName, OBJ_TREND, 0, TimeCurrent(), price, TimeCurrent(), price))
    {
        Print("Failed to create object: ", GetLastError());
    }

    // Set properties for the line
    ObjectSetInteger(0, objectName, OBJPROP_COLOR, lineColor);
    ObjectSetInteger(0, objectName, OBJPROP_WIDTH, 2);
    ObjectSetInteger(0, objectName, OBJPROP_STYLE, STYLE_SOLID);

    // Create two separate lines to form a short horizontal line
    string leftObjectName = objectName + "_Left";
    string rightObjectName = objectName + "_Right";

    // Left line
    ObjectCreate(0, leftObjectName, OBJ_TREND, 0, TimeCurrent() - PeriodSeconds(), price, TimeCurrent() - PeriodSeconds(), price - shortLineLength);
    ObjectSetInteger(0, leftObjectName, OBJPROP_COLOR, lineColor);
    ObjectSetInteger(0, leftObjectName, OBJPROP_WIDTH, 2);
    ObjectSetInteger(0, leftObjectName, OBJPROP_STYLE, STYLE_SOLID);

    // Right line
    ObjectCreate(0, rightObjectName, OBJ_TREND, 0, TimeCurrent(), price, TimeCurrent(), price + shortLineLength);
    ObjectSetInteger(0, rightObjectName, OBJPROP_COLOR, lineColor);
    ObjectSetInteger(0, rightObjectName, OBJPROP_WIDTH, 2);
    ObjectSetInteger(0, rightObjectName, OBJPROP_STYLE, STYLE_SOLID);
}

//+------------------------------------------------------------------+
